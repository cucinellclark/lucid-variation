#!/usr/bin/env snakemake -s

import os
import subprocess

sample_id_list = []
for sample_id in config['paired_end_libs']:
    sample_id_list.append(sample_id)

wildcard_constraints:
    sample_id= '|'.join([re.escape(x) for x in sample_id_list])

rule all:
    input:
        expand("aligned/{sample_id}.bam", sample_id=sample_id_list),
        expand("aligned/{sample_id}.bam.bai", sample_id=sample_id_list)

rule minimap2_alignment_paired:
    input:
    output:
        tmp_sam = temp('aligned/{sample_id}.sam'),
        aligned_read = 'aligned/{sample_id}.bam'
    params:
        preset = 'sr', # sr stands for short-read
        fasta = config['fasta'],
        read1 = lambda wildcards: config['paired_end_libs'][wildcards.sample_id]['read1'],
        read2 = lambda wildcards: config['paired_end_libs'][wildcards.sample_id]['read2'],
        sample_id = lambda wildcards: wildcards.sample_id
    threads: 4
    log:
        "log/{sample_id}_minimap2.log"
    run:
        sample_id = params.sample_id
        minimap_cmd = ['minimap2','-ax',params.preset,'-t',str(threads),params.fasta,params.read1,params.read2,'-R',f"\"@RG\\tID:{sample_id}\\tPL:ILLUMINA\\tLB:LB1\\tSM:{sample_id}\"",'-o',output.tmp_sam]
        print(' '.join(minimap_cmd))
        subprocess.check_call(minimap_cmd)
        samtools_cmd = ['samtools','sort','-o',output.aligned_read,output.tmp_sam]
        print(' '.join(samtools_cmd))
        subprocess.check_call(samtools_cmd)

rule index_bam:
    input:
        bam="aligned/{sample_id}.bam"
    output:
        bai="aligned/{sample_id}.bam.bai"
    log:
        "log/{sample_id}_index.log"
    shell:
        """
        samtools index {input.bam} {output.bai}
        """
